{"ast":null,"code":"var _jsxFileName = \"/Users/josemarin/Desktop/project1/Group-1/project1-frontend/src/components/TransactionComponent/transaction-context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback } from \"react\";\nimport { fetchTransactionsApi, addTransactionApi, deleteTransactionApi, updateTransactionApi, fetchUserAccountsApi, fetchAccountDetailsApi } from \"./transaction-api\";\n\n// Create a context to hold transaction-related data and functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionContext = /*#__PURE__*/createContext();\n\n// TransactionProvider component manages the global state for transactions\nexport const TransactionProvider = ({\n  children\n}) => {\n  _s();\n  const [state, setState] = useState({\n    transactions: [],\n    accounts: [],\n    selectedAccount: null,\n    newTransaction: {\n      transactionDate: \"\",\n      amount: \"\",\n      description: \"\",\n      recurring: \"\",\n      recurringFrequency: \"\",\n      transactionType: \"\",\n      relatedTransactionId: \"\"\n    },\n    updatedTransaction: null // Change this to null initially\n  });\n  const handleInputChange = event => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = event.target;\n    const inputValue = type === \"checkbox\" ? checked : value;\n    setState(prevState => ({\n      ...prevState,\n      newTransaction: {\n        ...prevState.newTransaction,\n        [name]: inputValue\n      },\n      updatedTransaction: prevState.updatedTransaction ? {\n        ...prevState.updatedTransaction,\n        [name]: inputValue\n      } : null\n    }));\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!state.selectedAccount) {\n      console.error(\"No account selected.\");\n      return;\n    }\n    const accountId = state.selectedAccount.accountId;\n    console.log(\"Transaction to add:\", JSON.stringify(state.newTransaction, null, 2)); // Log the new transaction in a readable format\n\n    addTransactionApi(accountId, JSON.stringify(state.newTransaction, null, 2)).then(response => {\n      setState(prevState => ({\n        ...prevState,\n        transactions: [...prevState.transactions, response.data],\n        newTransaction: {\n          transactionDate: \"\",\n          amount: \"\",\n          description: \"\",\n          recurring: \"\",\n          recurringFrequency: \"\",\n          transactionType: \"\",\n          relatedTransactionId: \"\"\n        }\n      }));\n    }).then(response => {\n      setState(prevState => ({\n        ...prevState,\n        selectedAccount: response.data\n      }));\n    }).catch(error => {\n      console.error(\"There was an error creating the transaction.\", error);\n    });\n  };\n  const updateTransaction = (transactionId, updatedTransaction) => {\n    console.log(\"Updating transaction:\", transactionId, updatedTransaction);\n    return updateTransactionApi(transactionId, updatedTransaction).then(response => {\n      setState(prevState => ({\n        ...prevState,\n        transactions: prevState.transactions.map(transaction => transaction.transactionId === transactionId ? response.data : transaction),\n        updatedTransaction: null // Clear the updatedTransaction after updating\n      }));\n      return fetchAccountDetailsApi(state.selectedAccount.accountId); // Fetch updated account details\n    }).then(response => {\n      setState(prevState => ({\n        ...prevState,\n        selectedAccount: response.data\n      }));\n    }).catch(error => {\n      console.error(\"There was an error updating the transaction.\", error);\n    });\n  };\n  const fetchTransactions = useCallback(accountId => {\n    console.log(\"fetching transactions...\");\n    return fetchTransactionsApi(accountId).then(response => {\n      setState(prevState => ({\n        ...prevState,\n        transactions: response.data\n      }));\n    }).catch(error => console.error(\"There was an error fetching the transactions.\", error));\n  }, []);\n  const fetchUserAccounts = useCallback(userId => {\n    fetchUserAccountsApi(userId).then(response => {\n      setState(prevState => ({\n        ...prevState,\n        accounts: response.data\n      }));\n    }).catch(error => console.error(\"There was an error fetching the accounts.\", error));\n  }, []);\n  const deleteTransaction = transactionId => {\n    if (!state.selectedAccount) {\n      console.error(\"No account selected.\");\n      return;\n    }\n    const accountId = state.selectedAccount.accountId;\n    deleteTransactionApi(transactionId).then(() => {\n      fetchTransactions(accountId).then(() => {\n        return fetchAccountDetailsApi(accountId); // Fetch updated account details\n      }).then(response => {\n        setState(prevState => ({\n          ...prevState,\n          selectedAccount: response.data\n        }));\n      }).catch(error => {\n        console.error(\"There was an error fetching the account details.\", error);\n      });\n      console.log(`Transaction with ID ${transactionId} deleted.`);\n    }).catch(error => {\n      console.error(\"There was an error deleting the transaction.\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(TransactionContext.Provider, {\n    value: {\n      state,\n      fetchTransactions,\n      deleteTransaction,\n      handleSubmit,\n      // Still provide handleSubmit for adding transactions\n      updateTransaction,\n      // Provide the update function\n      handleInputChange,\n      fetchUserAccounts,\n      setState // Pass setState to allow setting selectedAccount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionProvider, \"BFeiITBk8vffhrFn7P7Ir/q+5h8=\");\n_c = TransactionProvider;\nexport const useTransactionContext = () => {\n  _s2();\n  return useContext(TransactionContext);\n};\n_s2(useTransactionContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"TransactionProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","fetchTransactionsApi","addTransactionApi","deleteTransactionApi","updateTransactionApi","fetchUserAccountsApi","fetchAccountDetailsApi","jsxDEV","_jsxDEV","TransactionContext","TransactionProvider","children","_s","state","setState","transactions","accounts","selectedAccount","newTransaction","transactionDate","amount","description","recurring","recurringFrequency","transactionType","relatedTransactionId","updatedTransaction","handleInputChange","event","name","value","type","checked","target","inputValue","prevState","handleSubmit","preventDefault","console","error","accountId","log","JSON","stringify","then","response","data","catch","updateTransaction","transactionId","map","transaction","fetchTransactions","fetchUserAccounts","userId","deleteTransaction","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTransactionContext","_s2","$RefreshReg$"],"sources":["/Users/josemarin/Desktop/project1/Group-1/project1-frontend/src/components/TransactionComponent/transaction-context.js"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback } from \"react\";\nimport {\n  fetchTransactionsApi,\n  addTransactionApi,\n  deleteTransactionApi,\n  updateTransactionApi,\n  fetchUserAccountsApi,\n  fetchAccountDetailsApi,\n} from \"./transaction-api\";\n\n// Create a context to hold transaction-related data and functions\nexport const TransactionContext = createContext();\n\n// TransactionProvider component manages the global state for transactions\nexport const TransactionProvider = ({ children }) => {\n  const [state, setState] = useState({\n    transactions: [],\n    accounts: [],\n    selectedAccount: null,\n    newTransaction: {\n      transactionDate: \"\",\n      amount: \"\",\n      description: \"\",\n      recurring: \"\",\n      recurringFrequency: \"\",\n      transactionType: \"\",\n      relatedTransactionId: \"\",\n    },\n    updatedTransaction: null, // Change this to null initially\n  });\n\n  const handleInputChange = (event) => {\n    const { name, value, type, checked } = event.target;\n    const inputValue = type === \"checkbox\" ? checked : value;\n    setState((prevState) => ({\n      ...prevState,\n      newTransaction: {\n        ...prevState.newTransaction,\n        [name]: inputValue,\n      },\n      updatedTransaction: prevState.updatedTransaction\n        ? {\n            ...prevState.updatedTransaction,\n            [name]: inputValue,\n          }\n        : null,\n    }));\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (!state.selectedAccount) {\n      console.error(\"No account selected.\");\n      return;\n    }\n    const accountId = state.selectedAccount.accountId;\n    console.log(\n      \"Transaction to add:\",\n      JSON.stringify(state.newTransaction, null, 2)\n    ); // Log the new transaction in a readable format\n\n    addTransactionApi(accountId, JSON.stringify(state.newTransaction, null, 2))\n      .then((response) => {\n        setState((prevState) => ({\n          ...prevState,\n          transactions: [...prevState.transactions, response.data],\n          newTransaction: {\n            transactionDate: \"\",\n            amount: \"\",\n            description: \"\",\n            recurring: \"\",\n            recurringFrequency: \"\",\n            transactionType: \"\",\n            relatedTransactionId: \"\",\n          },\n        }));\n      })\n      .then((response) => {\n        setState((prevState) => ({\n          ...prevState,\n          selectedAccount: response.data,\n        }));\n      })\n      .catch((error) => {\n        console.error(\"There was an error creating the transaction.\", error);\n      });\n  };\n\n  const updateTransaction = (transactionId, updatedTransaction) => {\n    console.log(\"Updating transaction:\", transactionId, updatedTransaction);\n    return updateTransactionApi(transactionId, updatedTransaction)\n      .then((response) => {\n        setState((prevState) => ({\n          ...prevState,\n          transactions: prevState.transactions.map((transaction) =>\n            transaction.transactionId === transactionId\n              ? response.data\n              : transaction\n          ),\n          updatedTransaction: null, // Clear the updatedTransaction after updating\n        }));\n        return fetchAccountDetailsApi(state.selectedAccount.accountId); // Fetch updated account details\n      })\n      .then((response) => {\n        setState((prevState) => ({\n          ...prevState,\n          selectedAccount: response.data,\n        }));\n      })\n      .catch((error) => {\n        console.error(\"There was an error updating the transaction.\", error);\n      });\n  };\n\n  const fetchTransactions = useCallback((accountId) => {\n    console.log(\"fetching transactions...\");\n    return fetchTransactionsApi(accountId)\n      .then((response) => {\n        setState((prevState) => ({\n          ...prevState,\n          transactions: response.data,\n        }));\n      })\n      .catch((error) =>\n        console.error(\"There was an error fetching the transactions.\", error)\n      );\n  }, []);\n\n  const fetchUserAccounts = useCallback((userId) => {\n    fetchUserAccountsApi(userId)\n      .then((response) => {\n        setState((prevState) => ({\n          ...prevState,\n          accounts: response.data,\n        }));\n      })\n      .catch((error) =>\n        console.error(\"There was an error fetching the accounts.\", error)\n      );\n  }, []);\n\n  const deleteTransaction = (transactionId) => {\n    if (!state.selectedAccount) {\n      console.error(\"No account selected.\");\n      return;\n    }\n    const accountId = state.selectedAccount.accountId;\n    deleteTransactionApi(transactionId)\n      .then(() => {\n        fetchTransactions(accountId)\n          .then(() => {\n            return fetchAccountDetailsApi(accountId); // Fetch updated account details\n          })\n          .then((response) => {\n            setState((prevState) => ({\n              ...prevState,\n              selectedAccount: response.data,\n            }));\n          })\n          .catch((error) => {\n            console.error(\n              \"There was an error fetching the account details.\",\n              error\n            );\n          });\n        console.log(`Transaction with ID ${transactionId} deleted.`);\n      })\n      .catch((error) => {\n        console.error(\"There was an error deleting the transaction.\", error);\n      });\n  };\n\n  return (\n    <TransactionContext.Provider\n      value={{\n        state,\n        fetchTransactions,\n        deleteTransaction,\n        handleSubmit, // Still provide handleSubmit for adding transactions\n        updateTransaction, // Provide the update function\n        handleInputChange,\n        fetchUserAccounts,\n        setState, // Pass setState to allow setting selectedAccount\n      }}\n    >\n      {children}\n    </TransactionContext.Provider>\n  );\n};\n\nexport const useTransactionContext = () => {\n  return useContext(TransactionContext);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}