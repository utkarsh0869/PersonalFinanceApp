{"ast":null,"code":"var _jsxFileName = \"/Users/josemarin/Desktop/project1/Group-1/project1-frontend/src/components/TransactionComponent/transaction-context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/components/TransactionComponent/transaction-context.js\nimport React, { createContext, useReducer, useCallback, useContext } from \"react\";\nimport { fetchTransactionsApi, fetchUserAccountsApi, addTransactionApi, deleteTransactionApi } from \"./transaction-api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  accounts: [],\n  selectedAccount: null,\n  transactions: [],\n  newTransaction: {\n    transactionDate: \"\",\n    amount: \"\",\n    description: \"\",\n    recurring: false,\n    recurringFrequency: \"\",\n    transactionType: \"\",\n    relatedTransactionId: \"\"\n  }\n};\nconst TransactionContext = /*#__PURE__*/createContext(initialState);\nconst transactionReducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_ACCOUNTS\":\n      return {\n        ...state,\n        accounts: action.payload\n      };\n    case \"SET_SELECTED_ACCOUNT\":\n      return {\n        ...state,\n        selectedAccount: action.payload\n      };\n    case \"SET_TRANSACTIONS\":\n      return {\n        ...state,\n        transactions: action.payload\n      };\n    case \"SET_NEW_TRANSACTION\":\n      return {\n        ...state,\n        newTransaction: action.payload\n      };\n    default:\n      return state;\n  }\n};\nconst TransactionProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(transactionReducer, initialState);\n  const fetchUserAccounts = useCallback(async userId => {\n    const accounts = await fetchUserAccountsApi(userId);\n    dispatch({\n      type: \"SET_ACCOUNTS\",\n      payload: accounts\n    });\n  }, []);\n  const fetchTransactions = useCallback(async accountId => {\n    const transactions = await fetchTransactionsApi(accountId);\n    dispatch({\n      type: \"SET_TRANSACTIONS\",\n      payload: transactions\n    });\n  }, []);\n  const handleInputChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    dispatch({\n      type: \"SET_NEW_TRANSACTION\",\n      payload: {\n        ...state.newTransaction,\n        [name]: value\n      }\n    });\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    await addTransactionApi(state.selectedAccount.accountId, state.newTransaction);\n    fetchTransactions(state.selectedAccount.accountId);\n  };\n  const deleteTransaction = async transactionId => {\n    await deleteTransactionApi(transactionId);\n    fetchTransactions(state.selectedAccount.accountId);\n  };\n  return /*#__PURE__*/_jsxDEV(TransactionContext.Provider, {\n    value: {\n      state,\n      fetchUserAccounts,\n      fetchTransactions,\n      handleInputChange,\n      handleSubmit,\n      deleteTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionProvider, \"MFpd81dkrx9TsdPWUMKlCN5Z88w=\");\n_c = TransactionProvider;\nconst useTransactionContext = () => {\n  _s2();\n  return useContext(TransactionContext);\n};\n_s2(useTransactionContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport { TransactionContext, TransactionProvider, useTransactionContext };\nvar _c;\n$RefreshReg$(_c, \"TransactionProvider\");","map":{"version":3,"names":["React","createContext","useReducer","useCallback","useContext","fetchTransactionsApi","fetchUserAccountsApi","addTransactionApi","deleteTransactionApi","jsxDEV","_jsxDEV","initialState","accounts","selectedAccount","transactions","newTransaction","transactionDate","amount","description","recurring","recurringFrequency","transactionType","relatedTransactionId","TransactionContext","transactionReducer","state","action","type","payload","TransactionProvider","children","_s","dispatch","fetchUserAccounts","userId","fetchTransactions","accountId","handleInputChange","event","name","value","target","handleSubmit","preventDefault","deleteTransaction","transactionId","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTransactionContext","_s2","$RefreshReg$"],"sources":["/Users/josemarin/Desktop/project1/Group-1/project1-frontend/src/components/TransactionComponent/transaction-context.js"],"sourcesContent":["// src/components/TransactionComponent/transaction-context.js\nimport React, {\n  createContext,\n  useReducer,\n  useCallback,\n  useContext,\n} from \"react\";\nimport {\n  fetchTransactionsApi,\n  fetchUserAccountsApi,\n  addTransactionApi,\n  deleteTransactionApi,\n} from \"./transaction-api\";\n\nconst initialState = {\n  accounts: [],\n  selectedAccount: null,\n  transactions: [],\n  newTransaction: {\n    transactionDate: \"\",\n    amount: \"\",\n    description: \"\",\n    recurring: false,\n    recurringFrequency: \"\",\n    transactionType: \"\",\n    relatedTransactionId: \"\",\n  },\n};\n\nconst TransactionContext = createContext(initialState);\n\nconst transactionReducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_ACCOUNTS\":\n      return { ...state, accounts: action.payload };\n    case \"SET_SELECTED_ACCOUNT\":\n      return { ...state, selectedAccount: action.payload };\n    case \"SET_TRANSACTIONS\":\n      return { ...state, transactions: action.payload };\n    case \"SET_NEW_TRANSACTION\":\n      return { ...state, newTransaction: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst TransactionProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(transactionReducer, initialState);\n\n  const fetchUserAccounts = useCallback(async (userId) => {\n    const accounts = await fetchUserAccountsApi(userId);\n    dispatch({ type: \"SET_ACCOUNTS\", payload: accounts });\n  }, []);\n\n  const fetchTransactions = useCallback(async (accountId) => {\n    const transactions = await fetchTransactionsApi(accountId);\n    dispatch({ type: \"SET_TRANSACTIONS\", payload: transactions });\n  }, []);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    dispatch({\n      type: \"SET_NEW_TRANSACTION\",\n      payload: { ...state.newTransaction, [name]: value },\n    });\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    await addTransactionApi(\n      state.selectedAccount.accountId,\n      state.newTransaction\n    );\n    fetchTransactions(state.selectedAccount.accountId);\n  };\n\n  const deleteTransaction = async (transactionId) => {\n    await deleteTransactionApi(transactionId);\n    fetchTransactions(state.selectedAccount.accountId);\n  };\n\n  return (\n    <TransactionContext.Provider\n      value={{\n        state,\n        fetchUserAccounts,\n        fetchTransactions,\n        handleInputChange,\n        handleSubmit,\n        deleteTransaction,\n      }}\n    >\n      {children}\n    </TransactionContext.Provider>\n  );\n};\n\nconst useTransactionContext = () => useContext(TransactionContext);\n\nexport { TransactionContext, TransactionProvider, useTransactionContext };\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IACVC,aAAa,EACbC,UAAU,EACVC,WAAW,EACXC,UAAU,QACL,OAAO;AACd,SACEC,oBAAoB,EACpBC,oBAAoB,EACpBC,iBAAiB,EACjBC,oBAAoB,QACf,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,EAAE;EACZC,eAAe,EAAE,IAAI;EACrBC,YAAY,EAAE,EAAE;EAChBC,cAAc,EAAE;IACdC,eAAe,EAAE,EAAE;IACnBC,MAAM,EAAE,EAAE;IACVC,WAAW,EAAE,EAAE;IACfC,SAAS,EAAE,KAAK;IAChBC,kBAAkB,EAAE,EAAE;IACtBC,eAAe,EAAE,EAAE;IACnBC,oBAAoB,EAAE;EACxB;AACF,CAAC;AAED,MAAMC,kBAAkB,gBAAGtB,aAAa,CAACU,YAAY,CAAC;AAEtD,MAAMa,kBAAkB,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EAC5C,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,cAAc;MACjB,OAAO;QAAE,GAAGF,KAAK;QAAEb,QAAQ,EAAEc,MAAM,CAACE;MAAQ,CAAC;IAC/C,KAAK,sBAAsB;MACzB,OAAO;QAAE,GAAGH,KAAK;QAAEZ,eAAe,EAAEa,MAAM,CAACE;MAAQ,CAAC;IACtD,KAAK,kBAAkB;MACrB,OAAO;QAAE,GAAGH,KAAK;QAAEX,YAAY,EAAEY,MAAM,CAACE;MAAQ,CAAC;IACnD,KAAK,qBAAqB;MACxB,OAAO;QAAE,GAAGH,KAAK;QAAEV,cAAc,EAAEW,MAAM,CAACE;MAAQ,CAAC;IACrD;MACE,OAAOH,KAAK;EAChB;AACF,CAAC;AAED,MAAMI,mBAAmB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACN,KAAK,EAAEO,QAAQ,CAAC,GAAG9B,UAAU,CAACsB,kBAAkB,EAAEb,YAAY,CAAC;EAEtE,MAAMsB,iBAAiB,GAAG9B,WAAW,CAAC,MAAO+B,MAAM,IAAK;IACtD,MAAMtB,QAAQ,GAAG,MAAMN,oBAAoB,CAAC4B,MAAM,CAAC;IACnDF,QAAQ,CAAC;MAAEL,IAAI,EAAE,cAAc;MAAEC,OAAO,EAAEhB;IAAS,CAAC,CAAC;EACvD,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMuB,iBAAiB,GAAGhC,WAAW,CAAC,MAAOiC,SAAS,IAAK;IACzD,MAAMtB,YAAY,GAAG,MAAMT,oBAAoB,CAAC+B,SAAS,CAAC;IAC1DJ,QAAQ,CAAC;MAAEL,IAAI,EAAE,kBAAkB;MAAEC,OAAO,EAAEd;IAAa,CAAC,CAAC;EAC/D,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMuB,iBAAiB,GAAIC,KAAK,IAAK;IACnC,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,KAAK,CAACG,MAAM;IACpCT,QAAQ,CAAC;MACPL,IAAI,EAAE,qBAAqB;MAC3BC,OAAO,EAAE;QAAE,GAAGH,KAAK,CAACV,cAAc;QAAE,CAACwB,IAAI,GAAGC;MAAM;IACpD,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,YAAY,GAAG,MAAOJ,KAAK,IAAK;IACpCA,KAAK,CAACK,cAAc,CAAC,CAAC;IACtB,MAAMpC,iBAAiB,CACrBkB,KAAK,CAACZ,eAAe,CAACuB,SAAS,EAC/BX,KAAK,CAACV,cACR,CAAC;IACDoB,iBAAiB,CAACV,KAAK,CAACZ,eAAe,CAACuB,SAAS,CAAC;EACpD,CAAC;EAED,MAAMQ,iBAAiB,GAAG,MAAOC,aAAa,IAAK;IACjD,MAAMrC,oBAAoB,CAACqC,aAAa,CAAC;IACzCV,iBAAiB,CAACV,KAAK,CAACZ,eAAe,CAACuB,SAAS,CAAC;EACpD,CAAC;EAED,oBACE1B,OAAA,CAACa,kBAAkB,CAACuB,QAAQ;IAC1BN,KAAK,EAAE;MACLf,KAAK;MACLQ,iBAAiB;MACjBE,iBAAiB;MACjBE,iBAAiB;MACjBK,YAAY;MACZE;IACF,CAAE;IAAAd,QAAA,EAEDA;EAAQ;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACkB,CAAC;AAElC,CAAC;AAACnB,EAAA,CAjDIF,mBAAmB;AAAAsB,EAAA,GAAnBtB,mBAAmB;AAmDzB,MAAMuB,qBAAqB,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMjD,UAAU,CAACmB,kBAAkB,CAAC;AAAA;AAAC8B,GAAA,CAA7DD,qBAAqB;AAE3B,SAAS7B,kBAAkB,EAAEM,mBAAmB,EAAEuB,qBAAqB;AAAG,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}