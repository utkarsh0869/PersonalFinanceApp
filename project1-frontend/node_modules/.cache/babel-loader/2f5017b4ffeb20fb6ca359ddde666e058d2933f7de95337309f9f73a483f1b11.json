{"ast":null,"code":"var _jsxFileName = \"/Users/josemarin/Desktop/project1/Group-1/project1-frontend/src/components/TransactionComponent/transaction-context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback } from \"react\";\nimport { fetchTransactionsApi, addTransactionApi, deleteTransactionApi, fetchUserAccountsApi } from \"./transaction-api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionContext = /*#__PURE__*/createContext();\nexport const TransactionProvider = ({\n  children\n}) => {\n  _s();\n  const [state, setState] = useState({\n    accounts: [],\n    selectedAccount: null,\n    transactions: [],\n    newTransaction: {\n      transactionDate: \"\",\n      amount: \"\",\n      description: \"\",\n      recurring: false,\n      recurringFrequency: \"\",\n      transactionType: \"\",\n      relatedTransactionId: \"\"\n    }\n  });\n  const handleInputChange = event => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = event.target;\n    setState(prevState => ({\n      ...prevState,\n      newTransaction: {\n        ...prevState.newTransaction,\n        [name]: type === \"checkbox\" ? checked : value\n      }\n    }));\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    const accountString = localStorage.getItem(\"account\");\n    if (accountString) {\n      const account = JSON.parse(accountString);\n      var accountId = account.accountId;\n    }\n    const formattedTransaction = {\n      ...state.newTransaction,\n      transactionDate: new Date(state.newTransaction.transactionDate).toISOString().split(\"T\")[0],\n      account: {\n        accountId: accountId\n      }\n    };\n    addTransactionApi(accountId, formattedTransaction).then(response => {\n      setState(prevState => ({\n        ...prevState,\n        transactions: [...prevState.transactions, response.data],\n        newTransaction: {\n          transactionDate: \"\",\n          amount: \"\",\n          description: \"\",\n          recurring: false,\n          recurringFrequency: \"\",\n          transactionType: \"\",\n          relatedTransactionId: \"\"\n        }\n      }));\n    }).catch(error => {\n      console.error(\"There was an error creating the transaction.\", error);\n    });\n  };\n  const fetchTransactions = useCallback(accountId => {\n    fetchTransactionsApi(accountId).then(response => {\n      setState(prevState => ({\n        ...prevState,\n        transactions: response.data\n      }));\n    }).catch(error => console.error(\"There was an error fetching the transactions.\", error));\n  }, []);\n  const fetchUserAccounts = useCallback(userId => {\n    fetchUserAccountsApi(userId).then(response => {\n      setState(prevState => ({\n        ...prevState,\n        accounts: response.data\n      }));\n    }).catch(error => console.error(\"There was an error fetching the accounts.\", error));\n  }, []);\n  const handleAccountChange = event => {\n    const accountId = event.target.value;\n    const selectedAccount = state.accounts.find(account => account.accountId === parseInt(accountId));\n    setState(prevState => ({\n      ...prevState,\n      selectedAccount\n    }));\n    fetchTransactions(accountId);\n  };\n  const deleteTransaction = transactionId => {\n    deleteTransactionApi(transactionId).then(response => {\n      if (response.data) {\n        setState(prevState => ({\n          ...prevState,\n          transactions: prevState.transactions.filter(transaction => transaction.transactionId !== transactionId)\n        }));\n        console.log(`Transaction with ID ${transactionId} deleted.`);\n      }\n    }).catch(error => {\n      console.error(\"There was an error deleting the transaction.\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(TransactionContext.Provider, {\n    value: {\n      state,\n      fetchTransactions,\n      fetchUserAccounts,\n      deleteTransaction,\n      handleSubmit,\n      handleInputChange,\n      handleAccountChange\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionProvider, \"njrFpe1Rnfpbu78x6LCJxEFHLPA=\");\n_c = TransactionProvider;\nexport const useTransactionContext = () => {\n  _s2();\n  return useContext(TransactionContext);\n};\n_s2(useTransactionContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"TransactionProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","fetchTransactionsApi","addTransactionApi","deleteTransactionApi","fetchUserAccountsApi","jsxDEV","_jsxDEV","TransactionContext","TransactionProvider","children","_s","state","setState","accounts","selectedAccount","transactions","newTransaction","transactionDate","amount","description","recurring","recurringFrequency","transactionType","relatedTransactionId","handleInputChange","event","name","value","type","checked","target","prevState","handleSubmit","preventDefault","accountString","localStorage","getItem","account","JSON","parse","accountId","formattedTransaction","Date","toISOString","split","then","response","data","catch","error","console","fetchTransactions","fetchUserAccounts","userId","handleAccountChange","find","parseInt","deleteTransaction","transactionId","filter","transaction","log","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTransactionContext","_s2","$RefreshReg$"],"sources":["/Users/josemarin/Desktop/project1/Group-1/project1-frontend/src/components/TransactionComponent/transaction-context.js"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback } from \"react\";\nimport {\n  fetchTransactionsApi,\n  addTransactionApi,\n  deleteTransactionApi,\n  fetchUserAccountsApi,\n} from \"./transaction-api\";\n\nexport const TransactionContext = createContext();\n\nexport const TransactionProvider = ({ children }) => {\n  const [state, setState] = useState({\n    accounts: [],\n    selectedAccount: null,\n    transactions: [],\n    newTransaction: {\n      transactionDate: \"\",\n      amount: \"\",\n      description: \"\",\n      recurring: false,\n      recurringFrequency: \"\",\n      transactionType: \"\",\n      relatedTransactionId: \"\",\n    },\n  });\n\n  const handleInputChange = (event) => {\n    const { name, value, type, checked } = event.target;\n    setState((prevState) => ({\n      ...prevState,\n      newTransaction: {\n        ...prevState.newTransaction,\n        [name]: type === \"checkbox\" ? checked : value,\n      },\n    }));\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const accountString = localStorage.getItem(\"account\");\n    if (accountString) {\n      const account = JSON.parse(accountString);\n      var accountId = account.accountId;\n    }\n\n    const formattedTransaction = {\n      ...state.newTransaction,\n      transactionDate: new Date(state.newTransaction.transactionDate)\n        .toISOString()\n        .split(\"T\")[0],\n      account: { accountId: accountId },\n    };\n\n    addTransactionApi(accountId, formattedTransaction)\n      .then((response) => {\n        setState((prevState) => ({\n          ...prevState,\n          transactions: [...prevState.transactions, response.data],\n          newTransaction: {\n            transactionDate: \"\",\n            amount: \"\",\n            description: \"\",\n            recurring: false,\n            recurringFrequency: \"\",\n            transactionType: \"\",\n            relatedTransactionId: \"\",\n          },\n        }));\n      })\n      .catch((error) => {\n        console.error(\"There was an error creating the transaction.\", error);\n      });\n  };\n\n  const fetchTransactions = useCallback((accountId) => {\n    fetchTransactionsApi(accountId)\n      .then((response) => {\n        setState((prevState) => ({\n          ...prevState,\n          transactions: response.data,\n        }));\n      })\n      .catch((error) =>\n        console.error(\"There was an error fetching the transactions.\", error)\n      );\n  }, []);\n\n  const fetchUserAccounts = useCallback((userId) => {\n    fetchUserAccountsApi(userId)\n      .then((response) => {\n        setState((prevState) => ({\n          ...prevState,\n          accounts: response.data,\n        }));\n      })\n      .catch((error) =>\n        console.error(\"There was an error fetching the accounts.\", error)\n      );\n  }, []);\n\n  const handleAccountChange = (event) => {\n    const accountId = event.target.value;\n    const selectedAccount = state.accounts.find(\n      (account) => account.accountId === parseInt(accountId)\n    );\n    setState((prevState) => ({\n      ...prevState,\n      selectedAccount,\n    }));\n    fetchTransactions(accountId);\n  };\n\n  const deleteTransaction = (transactionId) => {\n    deleteTransactionApi(transactionId)\n      .then((response) => {\n        if (response.data) {\n          setState((prevState) => ({\n            ...prevState,\n            transactions: prevState.transactions.filter(\n              (transaction) => transaction.transactionId !== transactionId\n            ),\n          }));\n          console.log(`Transaction with ID ${transactionId} deleted.`);\n        }\n      })\n      .catch((error) => {\n        console.error(\"There was an error deleting the transaction.\", error);\n      });\n  };\n\n  return (\n    <TransactionContext.Provider\n      value={{\n        state,\n        fetchTransactions,\n        fetchUserAccounts,\n        deleteTransaction,\n        handleSubmit,\n        handleInputChange,\n        handleAccountChange,\n      }}\n    >\n      {children}\n    </TransactionContext.Provider>\n  );\n};\n\nexport const useTransactionContext = () => {\n  return useContext(TransactionContext);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}