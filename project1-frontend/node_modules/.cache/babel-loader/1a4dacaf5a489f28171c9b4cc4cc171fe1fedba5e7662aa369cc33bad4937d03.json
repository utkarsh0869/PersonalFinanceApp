{"ast":null,"code":"var _jsxFileName = \"/Users/josemarin/Desktop/project1/Group-1/project1-frontend/src/components/TransactionComponent/transaction-context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport { fetchTransactionsApi, addTransactionApi, deleteTransactionApi } from './transaction-api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionContext = /*#__PURE__*/createContext();\nexport const TransactionProvider = ({\n  children\n}) => {\n  _s();\n  const [state, setState] = useState({\n    transactions: [],\n    newTransaction: {\n      transactionDate: '',\n      amount: '',\n      description: '',\n      recurring: \"\",\n      recurringFrequency: '',\n      transactionType: '',\n      relatedTransactionId: ''\n    }\n  });\n  const handleInputChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setState(prevState => ({\n      ...prevState,\n      newTransaction: {\n        ...prevState.newTransaction,\n        [name]: value\n      }\n    }));\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    const accountString = localStorage.getItem(\"account\");\n    if (accountString) {\n      const account = JSON.parse(accountString);\n      var accountId = account.id;\n    }\n    addTransactionApi(accountId, state.newTransaction).then(response => {\n      setState(prevState => ({\n        ...prevState,\n        transactions: [...prevState.transactions, response.data],\n        transactionDate: '',\n        amount: '',\n        description: '',\n        recurring: \"\",\n        recurringFrequency: '',\n        transactionType: '',\n        relatedTransactionId: ''\n      }));\n    }).catch(error => {\n      console.error('There was an error creating the transaction.', error);\n    });\n  };\n  const fetchTransactions = useCallback(accountId => {\n    fetchTransactionsApi(accountId).then(response => {\n      setState(prevState => ({\n        ...prevState,\n        transactions: response.data\n      }));\n    }).catch(error => console.error('There was an error fetching the transactionss.', error));\n  }, []);\n  const deleteTransaction = transactionId => {\n    deleteTransactionApi(transactionId).then(response => {\n      if (response.data) {\n        setState(prevState => ({\n          ...prevState,\n          transactions: prevState.transactions.filter(transaction => transaction.transactionId !== transactionId)\n        }));\n        console.log(`Transaction with ID ${transactionId} deleted.`);\n      }\n    }).catch(error => {\n      console.error('There was an error deleting the transaction.', error);\n    });\n    return /*#__PURE__*/_jsxDEV(TransactionContext.Provider, {\n      value: {\n        state,\n        fetchTransactions,\n        deleteTransaction,\n        handleSubmit,\n        handleInputChange\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this);\n  };\n};\n_s(TransactionProvider, \"73HH/90hqnJvYZYzQpgnnoIL3aw=\");\n_c = TransactionProvider;\nexport const useTransactionContext = () => {\n  _s2();\n  return useContext(TransactionContext);\n};\n_s2(useTransactionContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"TransactionProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","fetchTransactionsApi","addTransactionApi","deleteTransactionApi","jsxDEV","_jsxDEV","TransactionContext","TransactionProvider","children","_s","state","setState","transactions","newTransaction","transactionDate","amount","description","recurring","recurringFrequency","transactionType","relatedTransactionId","handleInputChange","event","name","value","target","prevState","handleSubmit","preventDefault","accountString","localStorage","getItem","account","JSON","parse","accountId","id","then","response","data","catch","error","console","fetchTransactions","deleteTransaction","transactionId","filter","transaction","log","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTransactionContext","_s2","$RefreshReg$"],"sources":["/Users/josemarin/Desktop/project1/Group-1/project1-frontend/src/components/TransactionComponent/transaction-context.js"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback } from 'react';\nimport { fetchTransactionsApi, addTransactionApi, deleteTransactionApi } from './transaction-api';\n\nexport const TransactionContext = createContext();\n\nexport const TransactionProvider = ({ children }) => {\n  const [state, setState] = useState({\n    transactions: [],\n    newTransaction: {\n      transactionDate: '',\n      amount: '',\n      description: '',\n      recurring: \"\",\n      recurringFrequency: '',\n      transactionType: '',\n      relatedTransactionId: ''\n    }\n  })\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setState(prevState => ({\n      ...prevState,\n      newTransaction: {\n        ...prevState.newTransaction,\n        [name]: value\n      }\n    }));\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const accountString = localStorage.getItem(\"account\");\n    if (accountString) {\n      const account = JSON.parse(accountString);\n      var accountId = account.id;\n    }\n\n    addTransactionApi(accountId, state.newTransaction)\n      .then(response => {\n        setState(prevState => ({\n          ...prevState,\n          transactions: [...prevState.transactions, response.data],\n          transactionDate: '',\n          amount: '',\n          description: '',\n          recurring: \"\",\n          recurringFrequency: '',\n          transactionType: '',\n          relatedTransactionId: ''\n        }));\n      })\n      .catch(error => {\n        console.error('There was an error creating the transaction.', error);\n      });\n  }\n\n  const fetchTransactions = useCallback((accountId) => {\n    fetchTransactionsApi(accountId)\n      .then(response => {\n        setState(prevState => ({\n          ...prevState,\n          transactions: response.data\n        }));\n      })\n      .catch(error => console.error('There was an error fetching the transactionss.', error));\n  }, []);\n\n  const deleteTransaction = (transactionId) => {\n    deleteTransactionApi(transactionId)\n      .then(response => {\n        if (response.data) {\n          setState(prevState => ({\n            ...prevState,\n            transactions: prevState.transactions.filter(transaction => transaction.transactionId !== transactionId)\n          }));\n          console.log(`Transaction with ID ${transactionId} deleted.`);\n        }\n      })\n      .catch(error => {\n        console.error('There was an error deleting the transaction.', error);\n      });\n\n    return (\n      <TransactionContext.Provider value={{ state, fetchTransactions, deleteTransaction, handleSubmit, handleInputChange }}>\n        {children}\n      </TransactionContext.Provider>\n    )\n  }\n}\n\nexport const useTransactionContext = () => {\n  return useContext(TransactionContext);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}