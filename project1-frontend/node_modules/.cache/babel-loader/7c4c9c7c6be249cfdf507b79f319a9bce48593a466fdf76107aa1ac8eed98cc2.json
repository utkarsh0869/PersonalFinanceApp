{"ast":null,"code":"var _jsxFileName = \"/Users/josemarin/Desktop/project1/Group-1/project1-frontend/src/components/TransactionComponent/transaction-context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/components/TransactionComponent/transaction-context.js\nimport React, { createContext, useContext, useState, useCallback } from \"react\";\nimport { fetchTransactionsApi, addTransactionApi, deleteTransactionApi, fetchUserAccountsApi } from \"./transaction-api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionContext = /*#__PURE__*/createContext();\nexport const TransactionProvider = ({\n  children\n}) => {\n  _s();\n  const [state, setState] = useState({\n    transactions: [],\n    accounts: [],\n    selectedAccount: null,\n    newTransaction: {\n      transactionDate: \"\",\n      amount: \"\",\n      description: \"\",\n      recurring: \"\",\n      recurringFrequency: \"\",\n      transactionType: \"\",\n      relatedTransactionId: \"\"\n    }\n  });\n  const handleInputChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setState(prevState => ({\n      ...prevState,\n      newTransaction: {\n        ...prevState.newTransaction,\n        [name]: value\n      }\n    }));\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    const accountId = state.selectedAccount.accountId;\n    addTransactionApi(accountId, state.newTransaction).then(response => {\n      setState(prevState => ({\n        ...prevState,\n        transactions: [...prevState.transactions, response.data],\n        newTransaction: {\n          transactionDate: \"\",\n          amount: \"\",\n          description: \"\",\n          recurring: \"\",\n          recurringFrequency: \"\",\n          transactionType: \"\",\n          relatedTransactionId: \"\"\n        }\n      }));\n    }).catch(error => {\n      console.error(\"There was an error creating the transaction.\", error);\n    });\n  };\n  const fetchTransactions = useCallback(accountId => {\n    fetchTransactionsApi(accountId).then(response => {\n      setState(prevState => ({\n        ...prevState,\n        transactions: response.data\n      }));\n    }).catch(error => console.error(\"There was an error fetching the transactions.\", error));\n  }, []);\n  const fetchUserAccounts = useCallback(userId => {\n    fetchUserAccountsApi(userId).then(response => {\n      setState(prevState => ({\n        ...prevState,\n        accounts: response.data\n      }));\n    }).catch(error => console.error(\"There was an error fetching the accounts.\", error));\n  }, []);\n  const deleteTransaction = transactionId => {\n    deleteTransactionApi(transactionId).then(response => {\n      if (response.data) {\n        setState(prevState => ({\n          ...prevState,\n          transactions: prevState.transactions.filter(transaction => transaction.transactionId !== transactionId)\n        }));\n        console.log(`Transaction with ID ${transactionId} deleted.`);\n      }\n    }).catch(error => {\n      console.error(\"There was an error deleting the transaction.\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(TransactionContext.Provider, {\n    value: {\n      state,\n      fetchTransactions,\n      deleteTransaction,\n      handleSubmit,\n      handleInputChange,\n      fetchUserAccounts\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionProvider, \"EhXb7pfCH/IxqmEbfQopyQv9AJw=\");\n_c = TransactionProvider;\nexport const useTransactionContext = () => {\n  _s2();\n  return useContext(TransactionContext);\n};\n_s2(useTransactionContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"TransactionProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","fetchTransactionsApi","addTransactionApi","deleteTransactionApi","fetchUserAccountsApi","jsxDEV","_jsxDEV","TransactionContext","TransactionProvider","children","_s","state","setState","transactions","accounts","selectedAccount","newTransaction","transactionDate","amount","description","recurring","recurringFrequency","transactionType","relatedTransactionId","handleInputChange","event","name","value","target","prevState","handleSubmit","preventDefault","accountId","then","response","data","catch","error","console","fetchTransactions","fetchUserAccounts","userId","deleteTransaction","transactionId","filter","transaction","log","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTransactionContext","_s2","$RefreshReg$"],"sources":["/Users/josemarin/Desktop/project1/Group-1/project1-frontend/src/components/TransactionComponent/transaction-context.js"],"sourcesContent":["// src/components/TransactionComponent/transaction-context.js\nimport React, { createContext, useContext, useState, useCallback } from \"react\";\nimport {\n  fetchTransactionsApi,\n  addTransactionApi,\n  deleteTransactionApi,\n  fetchUserAccountsApi,\n} from \"./transaction-api\";\n\nexport const TransactionContext = createContext();\n\nexport const TransactionProvider = ({ children }) => {\n  const [state, setState] = useState({\n    transactions: [],\n    accounts: [],\n    selectedAccount: null,\n    newTransaction: {\n      transactionDate: \"\",\n      amount: \"\",\n      description: \"\",\n      recurring: \"\",\n      recurringFrequency: \"\",\n      transactionType: \"\",\n      relatedTransactionId: \"\",\n    },\n  });\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setState((prevState) => ({\n      ...prevState,\n      newTransaction: {\n        ...prevState.newTransaction,\n        [name]: value,\n      },\n    }));\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const accountId = state.selectedAccount.accountId;\n\n    addTransactionApi(accountId, state.newTransaction)\n      .then((response) => {\n        setState((prevState) => ({\n          ...prevState,\n          transactions: [...prevState.transactions, response.data],\n          newTransaction: {\n            transactionDate: \"\",\n            amount: \"\",\n            description: \"\",\n            recurring: \"\",\n            recurringFrequency: \"\",\n            transactionType: \"\",\n            relatedTransactionId: \"\",\n          },\n        }));\n      })\n      .catch((error) => {\n        console.error(\"There was an error creating the transaction.\", error);\n      });\n  };\n\n  const fetchTransactions = useCallback((accountId) => {\n    fetchTransactionsApi(accountId)\n      .then((response) => {\n        setState((prevState) => ({\n          ...prevState,\n          transactions: response.data,\n        }));\n      })\n      .catch((error) =>\n        console.error(\"There was an error fetching the transactions.\", error)\n      );\n  }, []);\n\n  const fetchUserAccounts = useCallback((userId) => {\n    fetchUserAccountsApi(userId)\n      .then((response) => {\n        setState((prevState) => ({\n          ...prevState,\n          accounts: response.data,\n        }));\n      })\n      .catch((error) =>\n        console.error(\"There was an error fetching the accounts.\", error)\n      );\n  }, []);\n\n  const deleteTransaction = (transactionId) => {\n    deleteTransactionApi(transactionId)\n      .then((response) => {\n        if (response.data) {\n          setState((prevState) => ({\n            ...prevState,\n            transactions: prevState.transactions.filter(\n              (transaction) => transaction.transactionId !== transactionId\n            ),\n          }));\n          console.log(`Transaction with ID ${transactionId} deleted.`);\n        }\n      })\n      .catch((error) => {\n        console.error(\"There was an error deleting the transaction.\", error);\n      });\n  };\n\n  return (\n    <TransactionContext.Provider\n      value={{\n        state,\n        fetchTransactions,\n        deleteTransaction,\n        handleSubmit,\n        handleInputChange,\n        fetchUserAccounts,\n      }}\n    >\n      {children}\n    </TransactionContext.Provider>\n  );\n};\n\nexport const useTransactionContext = () => {\n  return useContext(TransactionContext);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}