{"ast":null,"code":"var _jsxFileName = \"/Users/josemarin/Desktop/project1/Group-1/project1-frontend/src/components/TransactionComponent/transaction-context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback } from \"react\";\nimport { fetchTransactionsApi, addTransactionApi, deleteTransactionApi, fetchUserAccountsApi, fetchAccountDetailsApi } from \"./transaction-api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionContext = /*#__PURE__*/createContext();\nexport const TransactionProvider = ({\n  children\n}) => {\n  _s();\n  const [state, setState] = useState({\n    transactions: [],\n    newTransaction: {\n      transactionDate: \"\",\n      amount: \"\",\n      description: \"\",\n      recurring: \"\",\n      recurringFrequency: \"\",\n      transactionType: \"\",\n      relatedTransactionId: \"\"\n    },\n    accounts: [],\n    selectedAccount: null\n  });\n  const handleInputChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setState(prevState => ({\n      ...prevState,\n      newTransaction: {\n        ...prevState.newTransaction,\n        [name]: value\n      }\n    }));\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    const {\n      selectedAccount\n    } = state;\n    if (!selectedAccount) {\n      console.error(\"No account selected\");\n      return;\n    }\n    addTransactionApi(selectedAccount.accountId, state.newTransaction).then(response => {\n      setState(prevState => ({\n        ...prevState,\n        transactions: [...prevState.transactions, response],\n        newTransaction: {\n          transactionDate: \"\",\n          amount: \"\",\n          description: \"\",\n          recurring: \"\",\n          recurringFrequency: \"\",\n          transactionType: \"\",\n          relatedTransactionId: \"\"\n        }\n      }));\n    }).catch(error => {\n      console.error(\"There was an error creating the transaction.\", error);\n    });\n  };\n  const fetchTransactions = useCallback(accountId => {\n    fetchTransactionsApi(accountId).then(response => {\n      setState(prevState => ({\n        ...prevState,\n        transactions: response\n      }));\n    }).catch(error => console.error(\"There was an error fetching the transactions.\", error));\n  }, []);\n  const fetchUserAccounts = useCallback(userId => {\n    fetchUserAccountsApi(userId).then(response => {\n      setState(prevState => ({\n        ...prevState,\n        accounts: response\n      }));\n    }).catch(error => console.error(\"There was an error fetching the accounts.\", error));\n  }, []);\n  const fetchAccountDetails = useCallback(accountId => {\n    fetchAccountDetailsApi(accountId).then(response => {\n      setState(prevState => ({\n        ...prevState,\n        selectedAccount: response\n      }));\n    }).catch(error => console.error(\"There was an error fetching the account details.\", error));\n  }, []);\n  const deleteTransaction = transactionId => {\n    deleteTransactionApi(transactionId).then(response => {\n      setState(prevState => ({\n        ...prevState,\n        transactions: prevState.transactions.filter(transaction => transaction.transactionId !== transactionId)\n      }));\n    }).catch(error => {\n      console.error(\"There was an error deleting the transaction.\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(TransactionContext.Provider, {\n    value: {\n      state,\n      fetchTransactions,\n      fetchUserAccounts,\n      fetchAccountDetails,\n      deleteTransaction,\n      handleSubmit,\n      handleInputChange\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionProvider, \"jufAAnTH9MNE/KfUXbpbQ3/PjFE=\");\n_c = TransactionProvider;\nexport const useTransactionContext = () => {\n  _s2();\n  return useContext(TransactionContext);\n};\n_s2(useTransactionContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"TransactionProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","fetchTransactionsApi","addTransactionApi","deleteTransactionApi","fetchUserAccountsApi","fetchAccountDetailsApi","jsxDEV","_jsxDEV","TransactionContext","TransactionProvider","children","_s","state","setState","transactions","newTransaction","transactionDate","amount","description","recurring","recurringFrequency","transactionType","relatedTransactionId","accounts","selectedAccount","handleInputChange","event","name","value","target","prevState","handleSubmit","preventDefault","console","error","accountId","then","response","catch","fetchTransactions","fetchUserAccounts","userId","fetchAccountDetails","deleteTransaction","transactionId","filter","transaction","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTransactionContext","_s2","$RefreshReg$"],"sources":["/Users/josemarin/Desktop/project1/Group-1/project1-frontend/src/components/TransactionComponent/transaction-context.js"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback } from \"react\";\nimport {\n  fetchTransactionsApi,\n  addTransactionApi,\n  deleteTransactionApi,\n  fetchUserAccountsApi,\n  fetchAccountDetailsApi,\n} from \"./transaction-api\";\n\nexport const TransactionContext = createContext();\n\nexport const TransactionProvider = ({ children }) => {\n  const [state, setState] = useState({\n    transactions: [],\n    newTransaction: {\n      transactionDate: \"\",\n      amount: \"\",\n      description: \"\",\n      recurring: \"\",\n      recurringFrequency: \"\",\n      transactionType: \"\",\n      relatedTransactionId: \"\",\n    },\n    accounts: [],\n    selectedAccount: null,\n  });\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setState((prevState) => ({\n      ...prevState,\n      newTransaction: {\n        ...prevState.newTransaction,\n        [name]: value,\n      },\n    }));\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const { selectedAccount } = state;\n    if (!selectedAccount) {\n      console.error(\"No account selected\");\n      return;\n    }\n\n    addTransactionApi(selectedAccount.accountId, state.newTransaction)\n      .then((response) => {\n        setState((prevState) => ({\n          ...prevState,\n          transactions: [...prevState.transactions, response],\n          newTransaction: {\n            transactionDate: \"\",\n            amount: \"\",\n            description: \"\",\n            recurring: \"\",\n            recurringFrequency: \"\",\n            transactionType: \"\",\n            relatedTransactionId: \"\",\n          },\n        }));\n      })\n      .catch((error) => {\n        console.error(\"There was an error creating the transaction.\", error);\n      });\n  };\n\n  const fetchTransactions = useCallback((accountId) => {\n    fetchTransactionsApi(accountId)\n      .then((response) => {\n        setState((prevState) => ({\n          ...prevState,\n          transactions: response,\n        }));\n      })\n      .catch((error) =>\n        console.error(\"There was an error fetching the transactions.\", error)\n      );\n  }, []);\n\n  const fetchUserAccounts = useCallback((userId) => {\n    fetchUserAccountsApi(userId)\n      .then((response) => {\n        setState((prevState) => ({\n          ...prevState,\n          accounts: response,\n        }));\n      })\n      .catch((error) =>\n        console.error(\"There was an error fetching the accounts.\", error)\n      );\n  }, []);\n\n  const fetchAccountDetails = useCallback((accountId) => {\n    fetchAccountDetailsApi(accountId)\n      .then((response) => {\n        setState((prevState) => ({\n          ...prevState,\n          selectedAccount: response,\n        }));\n      })\n      .catch((error) =>\n        console.error(\"There was an error fetching the account details.\", error)\n      );\n  }, []);\n\n  const deleteTransaction = (transactionId) => {\n    deleteTransactionApi(transactionId)\n      .then((response) => {\n        setState((prevState) => ({\n          ...prevState,\n          transactions: prevState.transactions.filter(\n            (transaction) => transaction.transactionId !== transactionId\n          ),\n        }));\n      })\n      .catch((error) => {\n        console.error(\"There was an error deleting the transaction.\", error);\n      });\n  };\n\n  return (\n    <TransactionContext.Provider\n      value={{\n        state,\n        fetchTransactions,\n        fetchUserAccounts,\n        fetchAccountDetails,\n        deleteTransaction,\n        handleSubmit,\n        handleInputChange,\n      }}\n    >\n      {children}\n    </TransactionContext.Provider>\n  );\n};\n\nexport const useTransactionContext = () => {\n  return useContext(TransactionContext);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}