{"ast":null,"code":"var _jsxFileName = \"/Users/josemarin/Desktop/project1/Group-1/project1-frontend/src/components/TransactionComponent/transaction-page.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Container, Row, Col, Button, Form, Card } from \"react-bootstrap\";\nimport { TransactionContext } from \"./transaction-context\";\nimport TransactionList from \"./transaction-list\";\nimport AddTransactionForm from \"./add-transaction-form\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TransactionPage() {\n  _s();\n  const {\n    state,\n    fetchTransactions,\n    handleInputChange,\n    handleSubmit\n  } = useContext(TransactionContext);\n  const [selectedAccount, setSelectedAccount] = useState(null);\n  useEffect(() => {\n    const userString = localStorage.getItem(\"user\");\n    if (userString) {\n      const user = JSON.parse(userString);\n      fetchUserAccounts(user.id);\n    }\n  }, []);\n  const handleAccountChange = e => {\n    const accountId = e.target.value;\n    const account = state.accounts.find(acc => acc.accountId === parseInt(accountId));\n    setSelectedAccount(account);\n    fetchTransactions(accountId);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    style: {\n      marginTop: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Transaction Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      controlId: \"accountSelect\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"Select Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        as: \"select\",\n        onChange: handleAccountChange,\n        defaultValue: \"\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select an account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), state.accounts.map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: account.accountId,\n          children: account.accountName\n        }, account.accountId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), selectedAccount && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Account Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n            children: selectedAccount.accountName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this), selectedAccount.balance && /*#__PURE__*/_jsxDEV(Card.Text, {\n            children: [\"Balance: \", selectedAccount.balance]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 17\n          }, this), selectedAccount.apr && /*#__PURE__*/_jsxDEV(Card.Text, {\n            children: [\"APR: \", selectedAccount.apr]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }, this), selectedAccount.type && /*#__PURE__*/_jsxDEV(Card.Text, {\n            children: [\"Type: \", selectedAccount.type]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 17\n          }, this), selectedAccount.creditLimit && /*#__PURE__*/_jsxDEV(Card.Text, {\n            children: [\"Credit Limit: \", selectedAccount.creditLimit]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), state.transactions.length > 0 ? /*#__PURE__*/_jsxDEV(TransactionList, {\n        transactions: state.transactions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No transactions found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        onClick: () => setShowModal(true),\n        children: \"Add New Transaction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(AddTransactionForm, {\n      showModal: showModal,\n      handleClose: () => setShowModal(false),\n      handleInputChange: handleInputChange,\n      handleSubmit: handleSubmit,\n      newTransaction: state.newTransaction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(TransactionPage, \"k5sWbVwpUSWadIxKL4+SbPeh4M8=\");\n_c = TransactionPage;\nvar _c;\n$RefreshReg$(_c, \"TransactionPage\");","map":{"version":3,"names":["React","useContext","useEffect","useState","Container","Row","Col","Button","Form","Card","TransactionContext","TransactionList","AddTransactionForm","jsxDEV","_jsxDEV","Fragment","_Fragment","TransactionPage","_s","state","fetchTransactions","handleInputChange","handleSubmit","selectedAccount","setSelectedAccount","userString","localStorage","getItem","user","JSON","parse","fetchUserAccounts","id","handleAccountChange","e","accountId","target","value","account","accounts","find","acc","parseInt","style","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","Group","controlId","Label","Control","as","onChange","defaultValue","disabled","map","accountName","Body","Title","balance","Text","apr","type","creditLimit","transactions","length","variant","onClick","setShowModal","showModal","handleClose","newTransaction","_c","$RefreshReg$"],"sources":["/Users/josemarin/Desktop/project1/Group-1/project1-frontend/src/components/TransactionComponent/transaction-page.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport { Container, Row, Col, Button, Form, Card } from \"react-bootstrap\";\nimport { TransactionContext } from \"./transaction-context\";\nimport TransactionList from \"./transaction-list\";\nimport AddTransactionForm from \"./add-transaction-form\";\n\nexport default function TransactionPage() {\n  const { state, fetchTransactions, handleInputChange, handleSubmit } =\n    useContext(TransactionContext);\n  const [selectedAccount, setSelectedAccount] = useState(null);\n\n  useEffect(() => {\n    const userString = localStorage.getItem(\"user\");\n    if (userString) {\n      const user = JSON.parse(userString);\n      fetchUserAccounts(user.id);\n    }\n  }, []);\n\n  const handleAccountChange = (e) => {\n    const accountId = e.target.value;\n    const account = state.accounts.find(\n      (acc) => acc.accountId === parseInt(accountId)\n    );\n    setSelectedAccount(account);\n    fetchTransactions(accountId);\n  };\n\n  return (\n    <Container style={{ marginTop: \"20px\" }}>\n      <h1>Transaction Management</h1>\n      <Form.Group controlId=\"accountSelect\">\n        <Form.Label>Select Account</Form.Label>\n        <Form.Control\n          as=\"select\"\n          onChange={handleAccountChange}\n          defaultValue=\"\"\n        >\n          <option value=\"\" disabled>\n            Select an account\n          </option>\n          {state.accounts.map((account) => (\n            <option key={account.accountId} value={account.accountId}>\n              {account.accountName}\n            </option>\n          ))}\n        </Form.Control>\n      </Form.Group>\n      {selectedAccount && (\n        <>\n          <h2>Account Details</h2>\n          <Card>\n            <Card.Body>\n              <Card.Title>{selectedAccount.accountName}</Card.Title>\n              {selectedAccount.balance && (\n                <Card.Text>Balance: {selectedAccount.balance}</Card.Text>\n              )}\n              {selectedAccount.apr && (\n                <Card.Text>APR: {selectedAccount.apr}</Card.Text>\n              )}\n              {selectedAccount.type && (\n                <Card.Text>Type: {selectedAccount.type}</Card.Text>\n              )}\n              {selectedAccount.creditLimit && (\n                <Card.Text>\n                  Credit Limit: {selectedAccount.creditLimit}\n                </Card.Text>\n              )}\n            </Card.Body>\n          </Card>\n          {state.transactions.length > 0 ? (\n            <TransactionList transactions={state.transactions} />\n          ) : (\n            <p>No transactions found.</p>\n          )}\n          <Button variant=\"primary\" onClick={() => setShowModal(true)}>\n            Add New Transaction\n          </Button>\n        </>\n      )}\n      <AddTransactionForm\n        showModal={showModal}\n        handleClose={() => setShowModal(false)}\n        handleInputChange={handleInputChange}\n        handleSubmit={handleSubmit}\n        newTransaction={state.newTransaction}\n      />\n    </Container>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}